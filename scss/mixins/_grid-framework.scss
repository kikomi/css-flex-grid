// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// Common properties for all breakpoints
@mixin grid-column($gutter) {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
}

@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
        $gutter: map-get($gutters, $breakpoint);
        
        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
                @include grid-column($gutter);
            }
        }
        .col#{$infix},
        .col#{$infix}-auto {
            @include grid-column($gutter);
        }
        
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
                margin-bottom: ($gutter / 2);
            }
            .col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: none; // Reset earlier grid tiers
                margin-bottom: ($gutter / 2);
            }

            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                    margin-bottom: ($gutter / 2);
                }
            }

            // since `.row` negative margins need to be compensated individually for each screen size,
            // setting specific paddings for `.col`, `*col-` for each breakpoint 
            .col,
            [class*='col-'] {
                padding-right: ($gutter / 2);
                padding-left: ($gutter / 2);
            }

            .order#{$infix}-first { order: -1; }

            .order#{$infix}-last { order: $columns + 1; }

            @for $i from 0 through $columns {
                .order#{$infix}-#{$i} { order: $i; }
            } 
            
            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
                    .offset#{$infix}-#{$i} {
                        @include make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}
